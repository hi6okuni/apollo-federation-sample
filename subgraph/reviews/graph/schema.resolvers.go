package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"reviews/graph/model"
)

// ReviewsForMovie is the resolver for the reviewsForMovie field.
func (r *movieResolver) ReviewsForMovie(ctx context.Context, obj *model.Movie) ([]*model.Review, error) {
	return []*model.Review{}, nil
}

// SubmitReview is the resolver for the submitReview field.
func (r *mutationResolver) SubmitReview(ctx context.Context, movieReview model.MovieReviewInput) (*model.SubmitReviewResponse, error) {
	return &model.SubmitReviewResponse{}, nil
}

// LatestReviews is the resolver for the latestReviews field.
func (r *queryResolver) LatestReviews(ctx context.Context) ([]*model.Review, error) {
	return []*model.Review{
		{
			ID:      "1",
			Comment: toPointer("Great movie!"),
			Rating:  toPointer(5),
		},
		{
			ID:      "2",
			Comment: toPointer("I've seen better."),
			Rating:  toPointer(3),
		},
	}, nil
}

// Movie is the resolver for the movie field.
func (r *reviewResolver) Movie(ctx context.Context, obj *model.Review) (*model.Movie, error) {
	return &model.Movie{}, nil
}

// Movie returns MovieResolver implementation.
func (r *Resolver) Movie() MovieResolver { return &movieResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Review returns ReviewResolver implementation.
func (r *Resolver) Review() ReviewResolver { return &reviewResolver{r} }

type movieResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type reviewResolver struct{ *Resolver }
